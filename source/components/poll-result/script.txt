String.prototype.deformat = function () {
  return Number(this.toString().replace(/\D/g, '').split(' ').join(''));
};

window.onload = function () {
  //set ordernum and percentage to the answers
  window.pollResultStore.groups.forEach((group) => {
    group.questions.forEach((question) => {
      let numArray = [];
      question.answers.forEach(function (answer) {
        numArray.push(String(answer.votes).deformat());
      });

      //get maximum
      const maxNum = Math.max.apply(null, numArray);

      question.answers.forEach(function (answer, index) {
        answer.ordernum = index;
        answer.percentage =
          Math.round((String(answer.votes).deformat() * 100) / maxNum) + '%';
      });
    });
  });

  //observers
  let callback = (entries, observer) => {
    entries.forEach((entry) => {
      if (entry.intersectionRatio > 0) {
        let event = new Event('showeffect');
        entry.target.dispatchEvent(event);
      }
    });
  };

  let observer = new IntersectionObserver(callback, { threshold: 1 });

  //poll vue application
  if (!window.Vue && !window.Vuex) return;

  Vue.use(Vuex);

  const store = new Vuex.Store({
    state: window.pollResultStore,
    mutations: {
      changeChecked(state, payload) {
        state.groups[payload.groupIndex].questions[
          payload.questionIndex
        ].answers[payload.answerIndex].checked = payload.checked;
      },
    },
  });

  Vue.component('switchButton', {
    data() {
      return {};
    },
    props: ['answers'],
    template: `
      <div class="b-switch-button inverse"><span @click="clickLeft()">По рейтингу</span><span @click="clickRight()">По порядку</span></div>
    `,
    methods: {
      clickLeft() {
        //slide switch button
        this.$el.classList.remove('inverse');
        //sort the answers by votes
        this.answers.sort((a, b) => {
          return String(b.votes).deformat() - String(a.votes).deformat();
        });
        //show effect
        this.showAnswersEffect();
      },
      clickRight() {
        //slide switch button
        this.$el.classList.add('inverse');
        //sort the answers by ordernum
        this.answers.sort((a, b) => {
          return Number(a.ordernum) - Number(b.ordernum);
        });
        //show effect
        this.showAnswersEffect();
      },
      showAnswersEffect() {
        let event = new Event('showeffect');
        this.$el
          .closest('.b-poll-result__questions__item')
          .querySelectorAll('.b-poll-result__answers__item')
          .forEach((answer) => {
            answer.dispatchEvent(event);
          });
      },
    },
  });

  Vue.component('pollQuestion', {
    data() {
      return {};
    },
    props: ['question'],
    template: `
      <div class="b-poll-result__questions__item">
        <div class="d-block d-sm-flex justify-content-between">
          <div class="b-poll-result__questions__header">
            <h3>{{question.title}}</h3>
            <p v-html="question.description"></p>
          </div>
          <hr class="d-block d-sm-none">
          <switch-button :answers="question.answers"></switch-button>
        </div>
        <hr class="d-block d-sm-none">
        <div class="b-poll-result__answers">
          <poll-answer v-for="(answer, index) in question.answers" :index="index" :answer="answer"></poll-answer>
        </div>
      </div>
    `,
    methods: {},
  });

  Vue.component('pollAnswer', {
    data() {
      return {};
    },
    props: ['answer', 'index'],
    template: `
      <div class="b-poll-result__answers__item" :data-percentage="answer.percentage" @showeffect="showEffect()">
        <div class="b-poll-result__answer-title" v-html="index+1+'. '+answer.title"></div>
        <div class="b-poll-result__answer-graph b-graph">
          <div class="b-graph__wrapper">
            <div class="b-graph__img"></div>
            <div class="b-graph__num">{{answer.votes}}</div>
          </div>
        </div>
      </div>
    `,
    methods: {
      showEffect() {
        const wrapper = this.$el.querySelector('.b-graph__wrapper');
        wrapper.style.width = 0;
        setTimeout(() => {
          wrapper.style.width = this.$el.getAttribute('data-percentage');
        }, 0);
      },
    },
  });

  let pollResultApp = new Vue({
    el: '#pollResult',
    store,
    data() {
      return {
        pollData: store.state,
      };
    },
    methods: {},
    mounted() {
      document
        .querySelectorAll('.b-poll-result__answers__item')
        .forEach(function (answer) {
          observer.observe(answer);
        });
    },
  });
};
